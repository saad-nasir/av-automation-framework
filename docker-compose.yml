version: '3.8'

services:
  user_service:
    build:
      context: .
      dockerfile: ./microservices/user_service/Dockerfile
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=testing
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 10s
      timeout: 30s
      retries: 3

  product_catalog_service:
    build:
      context: .
      dockerfile: ./microservices/product_catalog_service/Dockerfile
    ports:
      - "5002:5002"
    environment:
      - FLASK_ENV=testing
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 10s
      timeout: 30s
      retries: 3

  shopping_cart_service:
    build:
      context: .
      dockerfile: ./microservices/shopping_cart_service/Dockerfile
    ports:
      - "5003:5003"
    environment:
      - FLASK_ENV=testing
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 10s
      timeout: 30s
      retries: 3

  order_processing_service:
    build:
      context: .
      dockerfile: ./microservices/order_processing_service/Dockerfile
    ports:
      - "5004:5004"
    environment:
      - FLASK_ENV=testing
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 10s
      timeout: 30s
      retries: 3

  notification_service:
    build:
      context: .
      dockerfile: ./microservices/notification_service/Dockerfile
    ports:
      - "5005:5005"
    environment:
      - FLASK_ENV=testing
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 10s
      timeout: 30s
      retries: 3

  test_service:
    build:
      context: .
      dockerfile: ./docker/test/Dockerfile
    networks:
      - ecommerce-network
    depends_on:
      - user_service
      - product_catalog_service
      - shopping_cart_service
      - order_processing_service
      - notification_service
    command: tail -f /dev/null

networks:
  ecommerce-network:
    driver: bridge
