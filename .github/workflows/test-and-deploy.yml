name: CI/CD Pipeline with Docker and Performance Testing

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 3: Build the Docker images using Docker Compose
      - name: Build Docker Images
        run: docker-compose build

      # Step 4: Start the containers using Docker Compose
      - name: Start Docker Containers
        run: docker-compose up -d

      # Step 5: Run Unit and Integration Tests
      - name: Run Unit and Integration Tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest tests/ --junitxml=test-reports/results.xml
        continue-on-error: true

      # Step 6: Archive the test results
      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: test-reports/results.xml

      # Step 7: Display the Pytest report in the logs
      - name: Display Pytest Report
        if: always()
        run: |
          echo "Displaying Pytest Report"
          cat test-reports/results.xml

      # Step 8: Run Performance Tests with Locust
      - name: Install Locust
        run: pip install locust

      - name: Run Locust Performance Test for User Service
        run: locust -f performance_tests/locustfile.py --headless -u 10 -r 2 --host=http://user_service:5001 --run-time 2m
        continue-on-error: true

      - name: Run Locust Performance Test for Product Catalog Service
        run: locust -f performance_tests/locustfile.py --headless -u 10 -r 2 --host=http://product_catalog_service:5002 --run-time 2m
        continue-on-error: true

      - name: Run Locust Performance Test for Shopping Cart Service
        run: locust -f performance_tests/locustfile.py --headless -u 10 -r 2 --host=http://shopping_cart_service:5003 --run-time 2m
        continue-on-error: true

      - name: Run Locust Performance Test for Order Processing Service
        run: locust -f performance_tests/locustfile.py --headless -u 10 -r 2 --host=http://order_processing_service:5004 --run-time 2m
        continue-on-error: true

      - name: Run Locust Performance Test for Notification Service
        run: locust -f performance_tests/locustfile.py --headless -u 10 -r 2 --host=http://notification_service:5005 --run-time 2m
        continue-on-error: true

      # Step 9: Tear Down Docker Containers
      - name: Tear Down Docker Containers
        if: always()
        run: docker-compose down
          